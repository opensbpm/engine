@startuml

package "instance" {

    class ProcessInstance {
        {field} +cancelMessage : String
        {field} -endTime : java.time.LocalDateTime
        {field} -id : Long
        {field} -startTime : java.time.LocalDateTime
        {field} +state : org.opensbpm.engine.api.instance.ProcessInstanceState
        ' {method} +addObjectInstance ( paramObjectModel1 : ObjectModel ) : ObjectInstance
        ' {method} +addSubject ( paramSubject1 : Subject ) : void
        ' {method} +findActiveSubject ( paramSubjectModel1 : SubjectModel ) : java.util.Optional
        ' {method} -getActiveSubjects () : java.util.stream.Stream
        ' {method} +getObjectInstance ( paramObjectModel1 : ObjectModel ) : java.util.Optional
        ' {method} +getUserSubjects () : java.util.Collection
        ' {method} +getValues ( paramObjectModel1 : ObjectModel ) : java.util.Map
        ' {method} +hasActiveSubjects () : boolean
        ' {method} +isActive () : boolean
        ' {method} +isStopped () : boolean
        ' {method}  {static} -lambda$findActiveSubject$1 ( paramSubjectModel1 : SubjectModel , paramSubject2 : Subject ) : boolean
        ' {method}  {static} -lambda$getObjectInstance$2 ( paramObjectModel1 : ObjectModel , paramObjectInstance2 : ObjectInstance ) : boolean
        ' {method}  {static} -lambda$getUserSubjects$0 ( paramSubject1 : Subject ) : java.util.Optional
        ' {method}  {static} -lambda$getValues$3 ( paramObjectInstance1 : ObjectInstance ) : java.util.Map
        ' {method} +toString () : String
    }

    class ObjectInstance {
        {field} -id : Long
        {field} +value : java.util.HashMap
        ' {method} +equals ( paramObject1 : Object ) : boolean
        ' {method} +hashCode () : int
        ' {method} +toString () : String
    }

    class Message {
        {field} -id : Long
        {field} +consumed : boolean
    }
  
    abstract class Subject {
        {field} -id : Long
        {field} -subjectTrail : java.util.SortedMap
        ' {method}  {abstract} +accept ( paramSubjectVisitor1 : SubjectVisitor ) : Object
        ' {method} +addMessage ( paramObjectModel1 : ObjectModel , paramSubject2 : Subject ) : Message
        ' {method} +getCurrent ( paramStateVisitor1 : StateVisitor ) : Object
        ' {method} +getCurrentState () : State
        ' {method} +getLastChanged () : java.time.LocalDateTime
        ' {method} -getUnconsumedMessages () : java.util.Collection
        ' {method} +getUnconsumedMessages ( paramObjectModel1 : ObjectModel ) : java.util.Collection
        ' {method} +getVisibleCurrentState () : java.util.Optional
        ' {method} +getVisibleState ( paramState1 : State ) : java.util.Optional
        ' {method} +hasUnconsumedMessages ( paramObjectModel1 : ObjectModel ) : boolean
        ' {method} +isActive () : boolean
        ' {method}  {static} -lambda$getCurrentState$1 ( paramSubjectTrail1 : SubjectTrail ) : State
        ' {method}  {static} -lambda$getLastChanged$2 ( paramSubjectTrail1 : SubjectTrail ) : java.time.LocalDateTime
        ' {method}  {static} -lambda$getUnconsumedMessages$3 ( paramMessage1 : Message ) : boolean
        ' {method}  {static} -lambda$getUnconsumedMessages$4 ( paramObjectModel1 : ObjectModel , paramMessage2 : Message ) : boolean
        ' {method} -lambda$getVisibleState$0 ( paramState1 : State ) : java.util.Optional
        ' {method} +setCurrentState ( paramState1 : State ) : void
        ' {method} +toString () : String
    }

    class ServiceSubject {
        ' {method} +accept ( paramSubjectVisitor1 : SubjectVisitor ) : Object
        ' {method} +getSubjectModel () : SubjectModel
        ' {method} +getSubjectModel () : ServiceSubjectModel
        ' {method} -lambda$getSubjectModel$0 () : IllegalStateException
    }

    class SubjectTrail {
        {field} -id : Long
        {field} -lastModified : long
        ' {method} +getLastModifiedDateTime () : java.time.LocalDateTime
        ' {method} +toString () : String
    }

    class User {
        {field} -id : Long
        {field} +name : String
        ' {method} +addRole ( paramRole1 : Role ) : void
        ' {method} +removeRole ( paramRole1 : Role ) : void
        ' {method} +toString () : String
    }

    class UserSubject {
        ' {method} +accept ( paramSubjectVisitor1 : SubjectVisitor ) : Object
        ' {method} +getCurrentOrAllUsers () : java.util.stream.Stream
        ' {method} +getSubjectModel () : SubjectModel
        ' {method} +getSubjectModel () : UserSubjectModel
        ' {method} -lambda$getSubjectModel$0 () : IllegalStateException
        ' {method} +toString () : String
    }


}


package "model" {
    class ProcessModel {
        {field} -id : Long
        {field} -name : String
        {field} +description : String
        {field} +state : org.opensbpm.engine.api.model.ProcessModelState
        {field} -createdAt : java.time.LocalDateTime
        ' {method} +addObjectModel ( paramString1 : String ) : ObjectModel
        ' {method} +addObjectModel ( paramObjectModel1 : ObjectModel ) : void
        ' {method} +addServiceSubjectModel ( paramString1 : String ) : ServiceSubjectModel
        ' {method} +addSubjectModel ( paramSubjectModel1 : SubjectModel ) : SubjectModel
        ' {method} +addUserSubjectModel ( paramString1 : String , paramList2 : java.util.List ) : UserSubjectModel
        ' {method} +getStarterSubjectModel () : SubjectModel
        ' {method} +getUserSubjectModels () : java.util.Collection
        ' {method} +isStarterSubjectModel ( paramSubjectModel1 : SubjectModel ) : boolean
        ' {method}  {static} -lambda$getUserSubjectModels$0 ( paramSubjectModel1 : SubjectModel ) : java.util.Optional
        ' {method} +setStarterSubject ( paramSubjectModel1 : SubjectModel ) : void
        ' {method} +toString () : String
    }

    class ModelVersion {
        {field} -major : int
        {field} -minor : int
        ' {method} +incrementMinor () : ModelVersion
        ' {method} +toString () : String
    }

    package "subjects" {

        abstract class SubjectModel {
            {field} -id : Long
            {field} -name : String
            {field} +starter : boolean
            ' {method}  {abstract} +accept ( paramSubjectModelVisitor1 : SubjectModelVisitor ) : Object
            ' {method} +addFunctionState ( paramString1 : String ) : FunctionState
            ' {method} +addReceiveState ( paramString1 : String ) : ReceiveState
            ' {method} +addSendState ( paramString1 : String , paramSubjectModel2 : SubjectModel , paramObjectModel3 : ObjectModel ) : SendState
            ' {method} -addState ( paramState1 : State ) : State
            ' {method} +toString () : String
        }

        class ServiceSubjectModel {
            ' {method} +accept ( paramSubjectModelVisitor1 : SubjectModelVisitor ) : Object
        }

        class UserSubjectModel {
            ' {method} +accept ( paramSubjectModelVisitor1 : SubjectModelVisitor ) : Object
            ' {method} +getAllUsers () : java.util.stream.Stream
            ' {method}  {static} -lambda$getAllUsers$0 ( paramRole1 : Role ) : java.util.stream.Stream
        }

        class Role {
            {field} -id : Long
            {field} -name : String
            ' {method} +addUser ( paramUser1 : User ) : void
            ' {method} +getAllUsers () : java.util.Set
            ' {method} +removeUser ( paramUser1 : User ) : void
            ' {method} +toString () : String
        }
    }

    package "states"{

        abstract class State {
            {field} -id : Long
            {field} -name : String
            {field} +displayName : String
            {field} +eventType : org.opensbpm.engine.api.model.definition.StateDefinition$StateEventType
            ' {method}  {abstract} +accept ( paramStateVisitor1 : StateVisitor ) : Object
            ' {method}  {abstract} +getHeads () : java.util.Collection
            ' {method} +isEnd () : boolean
            ' {method} +isStart () : boolean
            ' {method} +toString () : String
        }

        class FunctionState {
            {field} -parameters : java.util.Map
            {field} +providerName : String
            ' {method} +accept ( paramStateVisitor1 : StateVisitor ) : Object
            ' {method} +addHead ( paramState1 : State ) : void
            ' {method} +addStatePermission ( paramStatePermission1 : StatePermission ) : void
            ' {method} +addStatePermission ( paramAttributeModel1 : AttributeModel , paramPermissionDefinition$Permission2 : org.opensbpm.engine.api.model.definition.PermissionDefinition$Permission ) : StatePermission
            ' {method} +findStatePermission ( paramAttributeModel1 : AttributeModel ) : java.util.Optional
            ' {method} +hasAnyPermission ( paramAttributeModel1 : AttributeModel ) : boolean
            ' {method} +hasAnyStatePermission ( paramObjectModel1 : ObjectModel ) : boolean
            ' {method} -hasPermission ( paramAttributeModel1 : AttributeModel , paramPermissionDefinition$Permission2 : org.opensbpm.engine.api.model.definition.PermissionDefinition$Permission ) : boolean
            ' {method} +hasReadPermission ( paramAttributeModel1 : AttributeModel ) : boolean
            ' {method} +hasWritePermission ( paramAttributeModel1 : AttributeModel ) : boolean
            ' {method} +isMandatory ( paramAttributeModel1 : AttributeModel ) : boolean
            ' {method}  {static} -lambda$findStatePermission$3 ( paramStatePermission1 : StatePermission ) : java.util.stream.Stream
            ' {method}  {static} -lambda$findStatePermission$4 ( paramAttributeModel1 : AttributeModel , paramStatePermission2 : StatePermission ) : boolean
            ' {method} -lambda$hasAnyStatePermission$0 ( paramAttributeModel1 : AttributeModel ) : boolean
            ' {method}  {static} -lambda$hasPermission$1 ( paramPermissionDefinition$Permission1 : org.opensbpm.engine.api.model.definition.PermissionDefinition$Permission , paramStatePermission2 : StatePermission ) : Boolean
            ' {method}  {static} -lambda$isMandatory$2 ( paramStatePermission1 : StatePermission ) : Boolean
            ' {method} +putParameter ( paramString1 : String , paramString2 : String ) : void
            ' {method} +toString () : String
        }

        class StatePermission {
            {field} -id : Long
            {field} -permission : org.opensbpm.engine.api.model.definition.PermissionDefinition$Permission
            {field} +mandatory : boolean
            {field} +defaultValue : String
            ' {method} +addChildPermission ( paramAttributeModel1 : AttributeModel , paramPermissionDefinition$Permission2 : org.opensbpm.engine.api.model.definition.PermissionDefinition$Permission ) : StatePermission
            ' {method} +getAllPermissions () : java.util.stream.Stream
            ' {method}  {static} -lambda$getAllPermissions$0 ( paramStatePermission1 : StatePermission ) : java.util.stream.Stream
            ' {method} +toString () : String
        }

        class SendState {
            {field} +async : boolean
            ' {method} +accept ( paramStateVisitor1 : StateVisitor ) : Object
            ' {method} +getHeads () : java.util.Collection
        }

        class ReceiveState {
            ' {method} +accept ( paramStateVisitor1 : StateVisitor ) : Object
            ' {method} +addMessageModel ( paramObjectModel1 : ObjectModel , paramState2 : State ) : MessageModel
            ' {method} +getHeads () : java.util.Collection
        }

        class MessageModel {
            {field} -id : Long
        }

        class StateGraph {
            {field} -vertices : java.util.Map
            {method} +getHeads () : java.util.Collection
            {method} +getLeafs () : java.util.Collection
            {method} +getRoots () : java.util.Collection
            {method} +getTails () : java.util.Collection
            ' {method}  {static} -lambda$new$0 ( paramState1 : State ) : boolean
            ' {method}  {static} -lambda$new$1 ( paramState1 : State ) : State
        }
    }


    package "objects" {

        class ObjectModel {
            {field} -id : Long
            {field} #name : String
            {field} +displayName : String
            ' {method} +addAttributeModel ( paramAttributeModel1 : AttributeModel ) : AttributeModel
            ' {method} +getAllAttributeModels () : java.util.stream.Stream
            ' {method}  {static} -lambda$addAttributeModel$2 ( paramAttributeModel1 : AttributeModel , paramAttributeModel2 : AttributeModel ) : int
            ' {method} -lambda$getAllAttributeModels$0 ( paramAttributeModel1 : AttributeModel ) : IsAttributeParent
            ' {method}  {static} -lambda$getAllAttributeModels$1 ( paramIsAttributeParent1 : IsAttributeParent ) : java.util.stream.Stream
            ' {method} +toString () : String
        }

        interface IsAttributeParent {
            ' {method}  {abstract} +getAttributeModels () : java.util.Collection
            ' {method}  {abstract} +getName () : String
        }

        abstract class AbstractContainerAttributeModel {
            ' {method} +addAttributeModel ( paramAttributeModel1 : AttributeModel ) : AttributeModel
            ' {method}  {static} -lambda$addAttributeModel$0 ( paramAttributeModel1 : AttributeModel , paramAttributeModel2 : AttributeModel ) : int
        }

        abstract class AttributeModel {
            {field} -id : Long
            {field} -name : String
            {field} +position : int
            ' {method}  {abstract} +accept ( paramAttributeModelVisitor1 : AttributeModelVisitor ) : Object
        }

        class SimpleAttributeModel {
            {field} -fieldType : org.opensbpm.engine.api.model.FieldType
            {field} -id : Long
            {field} +indexed : boolean
            ' {method} +accept ( paramAttributeModelVisitor1 : AttributeModelVisitor ) : Object
            ' {method} +toString () : String
        }

        class NestedAttributeModel {
            ' {method} +accept ( paramAttributeModelVisitor1 : AttributeModelVisitor ) : Object
            ' {method} +toString () : String
        }

        class IndexedAttributeModel {
            ' {method} +accept ( paramAttributeModelVisitor1 : AttributeModelVisitor ) : Object
            ' {method} +toString () : String
        }

    }

}


Message -->  Subject : sender
Message -->  ObjectModel : objectModel
ObjectInstance -->  ProcessInstance : processInstance
ObjectInstance -->  ObjectModel : objectModel
ProcessInstance "1" o-- "0..*"  ObjectInstance : objectInstances
ProcessInstance "1" o-- "0..*"  Subject : subjects
ProcessInstance -->  User : startUser
ProcessInstance -->  ProcessModel : processModel
ServiceSubject --|>  Subject
Subject "1" o-- "0..*"  Message : messages
Subject -->  ProcessInstance : processInstance
Subject -->  SubjectTrail : currentTrail
Subject -->  SubjectModel : subjectModel
SubjectTrail -->  Subject : subject
SubjectTrail -->  State : state
' SubjectVisitor$OptionalSubjectAdapter ..|>  SubjectVisitor
User "1" o-- "0..*"  Role : roles
UserSubject -->  User : user
UserSubject --|>  Subject
AbstractContainerAttributeModel "1" o-- "0..*"  AttributeModel : attributeModels
AbstractContainerAttributeModel --|>  AttributeModel
AbstractContainerAttributeModel ..|>  IsAttributeParent
AttributeModel -->  AttributeModel : parent
AttributeModel -->  ObjectModel : objectModel
FunctionState "1" o-- "0..*"  State : heads
FunctionState "1" o-- "0..*"  StatePermission : statePermissions
FunctionState --|>  State
IndexedAttributeModel --|>  AbstractContainerAttributeModel
MessageModel -->  ObjectModel : objectModel
MessageModel -->  State : head
NestedAttributeModel --|>  AbstractContainerAttributeModel
ObjectModel "1" o-- "0..*"  AttributeModel : attributeModels
ObjectModel ..|>  IsAttributeParent
ProcessModel "1" o-- "0..*"  ObjectModel : objectModels
ProcessModel "1" o-- "0..*"  SubjectModel : subjectModels
ProcessModel -->  ModelVersion : version
ReceiveState "1" o-- "0..*"  MessageModel : messageModels
ReceiveState --|>  State
Role "1" o-- "0..*"  User : users
SendState -->  ObjectModel : objectModel
SendState -->  State : head
SendState -->  SubjectModel : receiver
SendState --|>  State
ServiceSubjectModel --|>  SubjectModel
SimpleAttributeModel --|>  AttributeModel
StatePermission "1" o-- "0..*"  StatePermission : childPermissions
StatePermission -->  AttributeModel : attributeModel
StatePermission -->  FunctionState : functionState
StatePermission -->  StatePermission : parent
' StateVisitor$OptionalStateAdapter ..|>  StateVisitor
SubjectModel "1" o-- "0..*"  State : states
' SubjectModelVisitor$OptionalSubjectModelAdapter ..|>  SubjectModelVisitor
UserSubjectModel "1" o-- "0..*"  Role : roles
UserSubjectModel --|>  SubjectModel


@enduml
